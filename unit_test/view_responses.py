#!/usr/bin/env python3
"""
Real-time Response Viewer
Query responses from centralized.db as they're generated by m06_comprehensive_evaluation.py

Usage:
  python3 view_responses.py                    # View all responses
  python3 view_responses.py baseline          # View baseline responses only
  python3 view_responses.py qlora             # View QLoRA responses only
  python3 view_responses.py --latest 10       # View latest 10 responses
  python3 view_responses.py --unsafe          # View unsafe prompts only
  python3 view_responses.py --safe            # View safe prompts only
"""

import sys
import sqlite3
import argparse
from pathlib import Path

def get_database_path():
    """Get path to centralized database"""
    return Path("outputs") / "centralized.db"

def query_responses(model_variant=None, safety_label=None, limit=None, latest=False):
    """Query responses from database with filters"""
    db_path = get_database_path()

    if not db_path.exists():
        print(f"‚ùå Database not found: {db_path}")
        return

    try:
        with sqlite3.connect(db_path) as conn:
            # Build query with optional filters
            query = """
                SELECT
                    mr.id,
                    mr.model_variant,
                    mr.prompt_id,
                    mr.safety_label,
                    mr.response_time_ms,
                    SUBSTR(mr.prompt_text, 1, 100) as prompt_preview,
                    SUBSTR(mr.response_text, 1, 200) as response_preview,
                    mr.created_at
                FROM model_responses mr
                WHERE 1=1
            """

            params = []

            if model_variant:
                query += " AND mr.model_variant = ?"
                params.append(model_variant)

            if safety_label:
                query += " AND mr.safety_label = ?"
                params.append(safety_label)

            if latest:
                query += " ORDER BY mr.created_at DESC"
            else:
                query += " ORDER BY mr.id"

            if limit:
                query += " LIMIT ?"
                params.append(limit)

            cursor = conn.cursor()
            cursor.execute(query, params)
            results = cursor.fetchall()

            if not results:
                print("üì≠ No responses found with specified filters")
                return

            # Display results
            print("=" * 120)
            print("MODEL RESPONSES - REAL-TIME VIEW")
            print("=" * 120)
            print(f"{'ID':>4} {'Model':>8} {'PromptID':>12} {'Safety':>8} {'Time(ms)':>9} {'Prompt Preview':>50} {'Response Preview':>50}")
            print("-" * 120)

            for row in results:
                id_val, model_var, prompt_id, safety, resp_time, prompt_prev, resp_prev, created = row
                print(f"{id_val:>4} {model_var:>8} {prompt_id:>12} {safety:>8} {resp_time:>9.1f} {prompt_prev:>50} {resp_prev:>50}")

            print(f"\nüìä Total responses: {len(results)}")

            # Show counts by model and safety
            cursor.execute("""
                SELECT
                    model_variant,
                    safety_label,
                    COUNT(*) as count,
                    AVG(response_time_ms) as avg_time
                FROM model_responses
                GROUP BY model_variant, safety_label
                ORDER BY model_variant, safety_label
            """)

            stats = cursor.fetchall()
            if stats:
                print("\nüìà Response Statistics:")
                print(f"{'Model':>10} {'Safety':>8} {'Count':>8} {'Avg Time(ms)':>12}")
                print("-" * 40)
                for model_var, safety, count, avg_time in stats:
                    print(f"{model_var:>10} {safety:>8} {count:>8} {avg_time:>12.1f}")

    except Exception as e:
        print(f"‚ùå Error querying database: {e}")

def view_full_response(response_id):
    """View full text of a specific response"""
    db_path = get_database_path()

    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT
                    model_variant, prompt_id, safety_label, response_time_ms,
                    prompt_text, response_text, created_at
                FROM model_responses
                WHERE id = ?
            """, (response_id,))

            result = cursor.fetchone()
            if not result:
                print(f"‚ùå Response ID {response_id} not found")
                return

            model_var, prompt_id, safety, resp_time, prompt_text, response_text, created = result

            print("=" * 80)
            print(f"FULL RESPONSE VIEW - ID: {response_id}")
            print("=" * 80)
            print(f"Model: {model_var}")
            print(f"Prompt ID: {prompt_id}")
            print(f"Safety Label: {safety}")
            print(f"Response Time: {resp_time:.1f}ms")
            print(f"Created: {created}")
            print("\n" + "-" * 80)
            print("PROMPT:")
            print("-" * 80)
            print(prompt_text)
            print("\n" + "-" * 80)
            print("RESPONSE:")
            print("-" * 80)
            print(response_text)
            print("=" * 80)

    except Exception as e:
        print(f"‚ùå Error viewing response: {e}")

def main():
    parser = argparse.ArgumentParser(description="View responses from centralized database")
    parser.add_argument("model", nargs="?", choices=["baseline", "qlora"],
                       help="Filter by model variant")
    parser.add_argument("--latest", type=int, metavar="N",
                       help="Show latest N responses")
    parser.add_argument("--safe", action="store_true",
                       help="Show only safe prompts")
    parser.add_argument("--unsafe", action="store_true",
                       help="Show only unsafe prompts")
    parser.add_argument("--full", type=int, metavar="ID",
                       help="View full response by ID")

    args = parser.parse_args()

    if args.full:
        view_full_response(args.full)
        return

    # Determine safety filter
    safety_label = None
    if args.safe:
        safety_label = "safe"
    elif args.unsafe:
        safety_label = "unsafe"

    query_responses(
        model_variant=args.model,
        safety_label=safety_label,
        limit=args.latest,
        latest=bool(args.latest)
    )

if __name__ == "__main__":
    main()